// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypeORM Test Suite should support convert cuid aspect: DRAFT_DraftAdministrativeData.CreatedByUser element definition 1`] = `
{
  "length": 256,
  "name": "CreatedByUser",
  "nullable": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: DRAFT_DraftAdministrativeData.CreationDateTime element definition 1`] = `
{
  "name": "CreationDateTime",
  "nullable": true,
  "precision": 3,
  "type": "datetime",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: DRAFT_DraftAdministrativeData.DraftIsCreatedByMe element definition 1`] = `
{
  "name": "DraftIsCreatedByMe",
  "nullable": true,
  "type": "boolean",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: DRAFT_DraftAdministrativeData.DraftIsProcessedByMe element definition 1`] = `
{
  "name": "DraftIsProcessedByMe",
  "nullable": true,
  "type": "boolean",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: DRAFT_DraftAdministrativeData.DraftUUID element definition 1`] = `
{
  "length": 36,
  "name": "DraftUUID",
  "nullable": false,
  "primary": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: DRAFT_DraftAdministrativeData.InProcessByUser element definition 1`] = `
{
  "length": 256,
  "name": "InProcessByUser",
  "nullable": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: DRAFT_DraftAdministrativeData.LastChangeDateTime element definition 1`] = `
{
  "name": "LastChangeDateTime",
  "nullable": true,
  "precision": 3,
  "type": "datetime",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: DRAFT_DraftAdministrativeData.LastChangedByUser element definition 1`] = `
{
  "length": 256,
  "name": "LastChangedByUser",
  "nullable": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Forms_drafts.DraftAdministrativeData_DraftUUID element definition 1`] = `
{
  "length": 36,
  "name": "DraftAdministrativeData_DraftUUID",
  "nullable": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Forms_drafts.HasActiveEntity element definition 1`] = `
{
  "default": false,
  "name": "HasActiveEntity",
  "nullable": false,
  "type": "boolean",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Forms_drafts.HasDraftEntity element definition 1`] = `
{
  "default": false,
  "name": "HasDraftEntity",
  "nullable": false,
  "type": "boolean",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Forms_drafts.ID element definition 1`] = `
{
  "length": 36,
  "name": "ID",
  "nullable": false,
  "primary": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Forms_drafts.IsActiveEntity element definition 1`] = `
{
  "default": true,
  "name": "IsActiveEntity",
  "nullable": false,
  "primary": true,
  "type": "boolean",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Forms_drafts.f1 element definition 1`] = `
{
  "length": 255,
  "name": "f1",
  "nullable": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Forms_drafts.f2 element definition 1`] = `
{
  "length": 255,
  "name": "f2",
  "nullable": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Forms_drafts.f3 element definition 1`] = `
{
  "name": "f3",
  "nullable": true,
  "type": "integer",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Forms_drafts.f4 element definition 1`] = `
{
  "name": "f4",
  "nullable": true,
  "type": "decimal",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Persons_drafts.Address element definition 1`] = `
{
  "length": 255,
  "name": "Address",
  "nullable": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Persons_drafts.Age element definition 1`] = `
{
  "default": 25,
  "name": "Age",
  "nullable": true,
  "type": "integer",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Persons_drafts.DraftAdministrativeData_DraftUUID element definition 1`] = `
{
  "length": 36,
  "name": "DraftAdministrativeData_DraftUUID",
  "nullable": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Persons_drafts.HasActiveEntity element definition 1`] = `
{
  "default": false,
  "name": "HasActiveEntity",
  "nullable": false,
  "type": "boolean",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Persons_drafts.HasDraftEntity element definition 1`] = `
{
  "default": false,
  "name": "HasDraftEntity",
  "nullable": false,
  "type": "boolean",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Persons_drafts.ID element definition 1`] = `
{
  "length": 36,
  "name": "ID",
  "nullable": false,
  "primary": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Persons_drafts.IsActiveEntity element definition 1`] = `
{
  "default": true,
  "name": "IsActiveEntity",
  "nullable": false,
  "primary": true,
  "type": "boolean",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: FioriService_Persons_drafts.Name element definition 1`] = `
{
  "length": 255,
  "name": "Name",
  "nullable": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: test_resources_fiori_db_Form.ID element definition 1`] = `
{
  "length": 36,
  "name": "ID",
  "nullable": false,
  "primary": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: test_resources_fiori_db_Form.f1 element definition 1`] = `
{
  "length": 255,
  "name": "f1",
  "nullable": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: test_resources_fiori_db_Form.f2 element definition 1`] = `
{
  "length": 255,
  "name": "f2",
  "nullable": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: test_resources_fiori_db_Form.f3 element definition 1`] = `
{
  "name": "f3",
  "nullable": true,
  "type": "integer",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: test_resources_fiori_db_Form.f4 element definition 1`] = `
{
  "name": "f4",
  "nullable": true,
  "type": "decimal",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: test_resources_fiori_db_Person.Address element definition 1`] = `
{
  "length": 255,
  "name": "Address",
  "nullable": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: test_resources_fiori_db_Person.Age element definition 1`] = `
{
  "default": 25,
  "name": "Age",
  "nullable": true,
  "type": "integer",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: test_resources_fiori_db_Person.ID element definition 1`] = `
{
  "length": 36,
  "name": "ID",
  "nullable": false,
  "primary": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert cuid aspect: test_resources_fiori_db_Person.Name element definition 1`] = `
{
  "length": 255,
  "name": "Name",
  "nullable": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.Active element definition 1`] = `
{
  "default": true,
  "name": "Active",
  "nullable": true,
  "type": "boolean",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.Age element definition 1`] = `
{
  "default": 10,
  "name": "Age",
  "nullable": true,
  "type": "integer",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.Avatar element definition 1`] = `
{
  "length": 255,
  "name": "Avatar",
  "nullable": true,
  "type": "varbinary",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.BirthDateTime element definition 1`] = `
{
  "name": "BirthDateTime",
  "nullable": true,
  "type": "datetime",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.BirthDay element definition 1`] = `
{
  "name": "BirthDay",
  "nullable": false,
  "type": "date",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.Create element definition 1`] = `
{
  "default": false,
  "name": "Create",
  "nullable": true,
  "type": "boolean",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.Credit element definition 1`] = `
{
  "default": 1,
  "name": "Credit",
  "nullable": true,
  "precision": 10,
  "scale": 2,
  "type": "decimal",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.Date1 element definition 1`] = `
{
  "name": "Date1",
  "nullable": true,
  "type": "date",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.Date2 element definition 1`] = `
{
  "name": "Date2",
  "nullable": true,
  "type": "date",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.DateTime1 element definition 1`] = `
{
  "default": [Function],
  "name": "DateTime1",
  "nullable": true,
  "type": "datetime",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.DateTime2 element definition 1`] = `
{
  "default": [Function],
  "name": "DateTime2",
  "nullable": true,
  "type": "datetime",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.DoubleProperty element definition 1`] = `
{
  "name": "DoubleProperty",
  "nullable": true,
  "type": "double",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.FullEmployee element definition 1`] = `
{
  "default": false,
  "name": "FullEmployee",
  "nullable": true,
  "type": "boolean",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.Int16Property element definition 1`] = `
{
  "name": "Int16Property",
  "nullable": true,
  "type": "smallint",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.Int32Property element definition 1`] = `
{
  "name": "Int32Property",
  "nullable": true,
  "type": "integer",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.Int64Property element definition 1`] = `
{
  "name": "Int64Property",
  "nullable": true,
  "type": "bigint",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.Integer64Property element definition 1`] = `
{
  "name": "Integer64Property",
  "nullable": true,
  "type": "bigint",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.Key element definition 1`] = `
{
  "name": "Key",
  "nullable": false,
  "type": "integer",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.LargeBinaryValue element definition 1`] = `
{
  "name": "LargeBinaryValue",
  "nullable": true,
  "type": "longblob",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.Name element definition 1`] = `
{
  "default": "Unknown",
  "length": 20,
  "name": "Name",
  "nullable": false,
  "primary": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.Picture element definition 1`] = `
{
  "name": "Picture",
  "nullable": true,
  "type": "longtext",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.StringWithoutLength element definition 1`] = `
{
  "length": undefined,
  "name": "StringWithoutLength",
  "nullable": true,
  "type": "text",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.Type element definition 1`] = `
{
  "length": 10,
  "name": "Type",
  "nullable": false,
  "primary": true,
  "type": "nvarchar",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.UInt8Property element definition 1`] = `
{
  "name": "UInt8Property",
  "nullable": true,
  "type": "tinyint",
}
`;

exports[`TypeORM Test Suite should support convert different prop type to EntitySchema: test_property_type_People.rank element definition 1`] = `
{
  "name": "rank",
  "nullable": true,
  "type": "longtext",
}
`;

exports[`TypeORM Test Suite should support extensions for csv app 1`] = `
[
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Name": {
          "length": 25,
          "name": "Name",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Size": {
          "name": "Size",
          "nullable": true,
          "precision": 18,
          "scale": 3,
          "type": "decimal",
        },
      },
      "name": "test_resources_csv_app_db_City",
      "synchronize": true,
      "tableName": "test_resources_csv_app_db_City",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_csv_app_db_City",
      ],
      "expression": "SELECT
  City_0.ID,
  City_0.Name,
  City_0.Size
FROM test_resources_csv_app_db_City AS City_0;",
      "name": "test_resources_csv_app_srv_AppService_Cities",
      "synchronize": true,
      "tableName": "test_resources_csv_app_srv_AppService_Cities",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Active": {
          "name": "Active",
          "nullable": true,
          "type": "boolean",
        },
        "Age": {
          "name": "Age",
          "nullable": true,
          "type": "integer",
        },
        "BirthDay": {
          "name": "BirthDay",
          "nullable": true,
          "type": "date",
        },
        "BlobDoc": {
          "length": undefined,
          "name": "BlobDoc",
          "nullable": true,
          "type": "varbinary",
        },
        "Disabled": {
          "default": false,
          "name": "Disabled",
          "nullable": true,
          "type": "boolean",
        },
        "GlobalUUID": {
          "length": 36,
          "name": "GlobalUUID",
          "nullable": true,
          "type": "nvarchar",
        },
        "Height": {
          "name": "Height",
          "nullable": true,
          "type": "double",
        },
        "ID": {
          "generated": "increment",
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "bigint",
        },
        "IDCard": {
          "name": "IDCard",
          "nullable": true,
          "type": "bigint",
        },
        "Name": {
          "length": 125,
          "name": "Name",
          "nullable": true,
          "type": "nvarchar",
        },
        "PreDelivery": {
          "default": false,
          "name": "PreDelivery",
          "nullable": true,
          "type": "boolean",
        },
        "Sign": {
          "name": "Sign",
          "nullable": true,
          "type": "datetime",
        },
        "SignTime": {
          "name": "SignTime",
          "nullable": true,
          "type": "time",
        },
        "SignTmp": {
          "name": "SignTmp",
          "nullable": true,
          "precision": 3,
          "type": "datetime",
        },
        "Weight": {
          "name": "Weight",
          "nullable": true,
          "type": "decimal",
        },
      },
      "name": "test_resources_csv_app_db_ComplexTypeEntity",
      "synchronize": true,
      "tableName": "test_resources_csv_app_db_ComplexTypeEntity",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_csv_app_db_ComplexTypeEntity",
      ],
      "expression": "SELECT
  ComplexTypeEntity_0.ID,
  ComplexTypeEntity_0.Name,
  ComplexTypeEntity_0.Age,
  ComplexTypeEntity_0.IDCard,
  ComplexTypeEntity_0.Weight,
  ComplexTypeEntity_0.Height,
  ComplexTypeEntity_0.Active,
  ComplexTypeEntity_0.BirthDay,
  ComplexTypeEntity_0.Sign,
  ComplexTypeEntity_0.SignTime,
  ComplexTypeEntity_0.SignTmp,
  ComplexTypeEntity_0.GlobalUUID,
  ComplexTypeEntity_0.BlobDoc
FROM test_resources_csv_app_db_ComplexTypeEntity AS ComplexTypeEntity_0;",
      "name": "test_resources_csv_app_srv_AppService_TypeEntity",
      "synchronize": true,
      "tableName": "test_resources_csv_app_srv_AppService_TypeEntity",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Disabled": {
          "default": false,
          "name": "Disabled",
          "nullable": true,
          "type": "boolean",
        },
        "ID": {
          "generated": "increment",
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "bigint",
        },
        "Name": {
          "length": 255,
          "name": "Name",
          "nullable": true,
          "type": "nvarchar",
        },
        "PreDelivery": {
          "default": false,
          "name": "PreDelivery",
          "nullable": true,
          "type": "boolean",
        },
      },
      "name": "test_resources_csv_app_db_Person",
      "synchronize": true,
      "tableName": "test_resources_csv_app_db_Person",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_csv_app_db_Person",
      ],
      "expression": "SELECT
  Person_0.ID,
  Person_0.Name
FROM test_resources_csv_app_db_Person AS Person_0;",
      "name": "test_resources_csv_app_srv_AppService_Peoples",
      "synchronize": true,
      "tableName": "test_resources_csv_app_srv_AppService_Peoples",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Name": {
          "length": 255,
          "name": "Name",
          "nullable": true,
          "type": "nvarchar",
        },
        "Size": {
          "name": "Size",
          "nullable": true,
          "precision": 11,
          "scale": 3,
          "type": "decimal",
        },
      },
      "name": "test_resources_csv_app_db_Area",
      "synchronize": true,
      "tableName": "test_resources_csv_app_db_Area",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_csv_app_db_Area",
      ],
      "expression": "SELECT
  Area_0.ID,
  Area_0.Name,
  Area_0.Size
FROM test_resources_csv_app_db_Area AS Area_0;",
      "name": "test_resources_csv_app_srv_AppService_Areas",
      "synchronize": true,
      "tableName": "test_resources_csv_app_srv_AppService_Areas",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Disabled": {
          "default": false,
          "name": "Disabled",
          "nullable": true,
          "type": "boolean",
        },
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "PreDelivery": {
          "default": false,
          "name": "PreDelivery",
          "nullable": true,
          "type": "boolean",
        },
        "address_City": {
          "length": 255,
          "name": "address_City",
          "nullable": true,
          "type": "nvarchar",
        },
        "address_Country": {
          "length": 255,
          "name": "address_Country",
          "nullable": true,
          "type": "nvarchar",
        },
        "address_Province": {
          "length": 255,
          "name": "address_Province",
          "nullable": true,
          "type": "nvarchar",
        },
        "address_Street": {
          "length": 255,
          "name": "address_Street",
          "nullable": true,
          "type": "nvarchar",
        },
        "price": {
          "name": "price",
          "nullable": true,
          "type": "decimal",
        },
      },
      "name": "test_resources_csv_app_db_House",
      "synchronize": true,
      "tableName": "test_resources_csv_app_db_House",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_csv_app_db_House",
      ],
      "expression": "SELECT
  House_0.ID,
  House_0.price,
  House_0.address_Country,
  House_0.address_Province,
  House_0.address_City,
  House_0.address_Street
FROM test_resources_csv_app_db_House AS House_0;",
      "name": "test_resources_csv_app_srv_AppService_Houses",
      "synchronize": true,
      "tableName": "test_resources_csv_app_srv_AppService_Houses",
      "type": "view",
    },
  },
]
`;

exports[`TypeORM Test Suite should support migrate different prop type to mysql 1`] = `
[
  {
    "parameters": undefined,
    "query": "CREATE TABLE \`test_property_type_People\` (\`Name\` varchar(20) NOT NULL DEFAULT 'Unknown', \`Age\` int NULL DEFAULT '10', \`Credit\` decimal(10,2) NULL DEFAULT '1.00', \`FullEmployee\` tinyint NULL DEFAULT 0, \`Active\` tinyint NULL DEFAULT 1, \`BirthDay\` date NOT NULL, \`BirthDateTime\` datetime NULL, \`Type\` varchar(10) NOT NULL, \`Avatar\` varbinary(255) NULL, \`Picture\` longtext NULL, \`rank\` longtext NULL, \`UInt8Property\` tinyint NULL, \`Int16Property\` smallint NULL, \`Int32Property\` int NULL, \`Int64Property\` bigint NULL, \`Integer64Property\` bigint NULL, \`Create\` tinyint NULL DEFAULT 0, \`Key\` int NOT NULL, \`DoubleProperty\` double NULL, \`StringWithoutLength\` text NULL, \`LargeBinaryValue\` longblob NULL, \`Date1\` date NULL, \`Date2\` date NULL, \`DateTime1\` datetime NULL DEFAULT NOW(), \`DateTime2\` datetime NULL DEFAULT CURRENT_TIMESTAMP(), PRIMARY KEY (\`Name\`, \`Type\`)) ENGINE=InnoDB CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'",
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables 1`] = `
[
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Name": {
          "length": 100,
          "name": "Name",
          "nullable": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_People",
      "synchronize": true,
      "tableName": "test_resources_migrate_People",
    },
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables 2`] = `
[
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Age": {
          "name": "Age",
          "nullable": true,
          "type": "integer",
        },
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Name": {
          "length": 100,
          "name": "Name",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_People",
      "synchronize": true,
      "tableName": "test_resources_migrate_People",
    },
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables 3`] = `
[
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Active": {
          "default": false,
          "name": "Active",
          "nullable": true,
          "type": "boolean",
        },
        "Age": {
          "name": "Age",
          "nullable": true,
          "type": "integer",
        },
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Name": {
          "length": 100,
          "name": "Name",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_People",
      "synchronize": true,
      "tableName": "test_resources_migrate_People",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.ID,
  People_0.Name,
  People_0.Age,
  People_0.Active
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = TRUE;",
      "name": "test_resources_migrate_ActivePeople",
      "synchronize": true,
      "tableName": "test_resources_migrate_ActivePeople",
      "type": "view",
    },
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables 4`] = `
[
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Active": {
          "default": false,
          "name": "Active",
          "nullable": true,
          "type": "boolean",
        },
        "Age": {
          "name": "Age",
          "nullable": true,
          "type": "integer",
        },
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Name": {
          "length": 100,
          "name": "Name",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_People",
      "synchronize": true,
      "tableName": "test_resources_migrate_People",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = FALSE;",
      "name": "test_resources_migrate_InActivePeople",
      "synchronize": true,
      "tableName": "test_resources_migrate_InActivePeople",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = TRUE;",
      "name": "test_resources_migrate_ActivePeople",
      "synchronize": true,
      "tableName": "test_resources_migrate_ActivePeople",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_ActivePeople",
        "test_resources_migrate_InActivePeople",
      ],
      "expression": "SELECT
  ActivePeople_0.Name
FROM test_resources_migrate_ActivePeople AS ActivePeople_0
UNION SELECT
  InActivePeople_1.Name
FROM test_resources_migrate_InActivePeople AS InActivePeople_1;",
      "name": "test_resources_migrate_AllPeoples",
      "synchronize": true,
      "tableName": "test_resources_migrate_AllPeoples",
      "type": "view",
    },
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables 5`] = `
[
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Active": {
          "default": false,
          "name": "Active",
          "nullable": true,
          "type": "boolean",
        },
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Level": {
          "name": "Level",
          "nullable": true,
          "type": "integer",
        },
        "Title": {
          "length": 255,
          "name": "Title",
          "nullable": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_Job",
      "synchronize": true,
      "tableName": "test_resources_migrate_Job",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_Job",
      ],
      "expression": "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active
FROM test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
      "name": "test_resources_migrate_ActiveJobs",
      "synchronize": true,
      "tableName": "test_resources_migrate_ActiveJobs",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Active": {
          "default": false,
          "name": "Active",
          "nullable": true,
          "type": "boolean",
        },
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Name": {
          "length": 100,
          "name": "Name",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_People",
      "synchronize": true,
      "tableName": "test_resources_migrate_People",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = FALSE;",
      "name": "test_resources_migrate_InActivePeople",
      "synchronize": true,
      "tableName": "test_resources_migrate_InActivePeople",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = TRUE;",
      "name": "test_resources_migrate_ActivePeople",
      "synchronize": true,
      "tableName": "test_resources_migrate_ActivePeople",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_ActivePeople",
        "test_resources_migrate_InActivePeople",
      ],
      "expression": "SELECT
  ActivePeople_0.Name
FROM test_resources_migrate_ActivePeople AS ActivePeople_0
UNION SELECT
  InActivePeople_1.Name
FROM test_resources_migrate_InActivePeople AS InActivePeople_1;",
      "name": "test_resources_migrate_AllPeoples",
      "synchronize": true,
      "tableName": "test_resources_migrate_AllPeoples",
      "type": "view",
    },
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables 6`] = `
[
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Active": {
          "default": false,
          "name": "Active",
          "nullable": true,
          "type": "boolean",
        },
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Level": {
          "name": "Level",
          "nullable": true,
          "type": "integer",
        },
        "Title": {
          "length": 255,
          "name": "Title",
          "nullable": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_Job",
      "synchronize": true,
      "tableName": "test_resources_migrate_Job",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_Job",
      ],
      "expression": "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active
FROM test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
      "name": "test_resources_migrate_ActiveJobs",
      "synchronize": true,
      "tableName": "test_resources_migrate_ActiveJobs",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Active": {
          "default": false,
          "name": "Active",
          "nullable": true,
          "type": "boolean",
        },
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Name": {
          "length": 100,
          "name": "Name",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_People",
      "synchronize": true,
      "tableName": "test_resources_migrate_People",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0;",
      "name": "test_resources_migrate_AllPeoples",
      "synchronize": true,
      "tableName": "test_resources_migrate_AllPeoples",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = FALSE;",
      "name": "test_resources_migrate_InActivePeople",
      "synchronize": true,
      "tableName": "test_resources_migrate_InActivePeople",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = TRUE;",
      "name": "test_resources_migrate_ActivePeople",
      "synchronize": true,
      "tableName": "test_resources_migrate_ActivePeople",
      "type": "view",
    },
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables 7`] = `
[
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Active": {
          "default": false,
          "name": "Active",
          "nullable": true,
          "type": "boolean",
        },
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Level": {
          "name": "Level",
          "nullable": true,
          "type": "integer",
        },
        "People_ID": {
          "length": 36,
          "name": "People_ID",
          "nullable": true,
          "type": "nvarchar",
        },
        "People_Name": {
          "length": 100,
          "name": "People_Name",
          "nullable": true,
          "type": "nvarchar",
        },
        "Title": {
          "length": 255,
          "name": "Title",
          "nullable": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_Job",
      "synchronize": true,
      "tableName": "test_resources_migrate_Job",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_Job",
      ],
      "expression": "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
      "name": "test_resources_migrate_ActiveJobs",
      "synchronize": true,
      "tableName": "test_resources_migrate_ActiveJobs",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Active": {
          "default": false,
          "name": "Active",
          "nullable": true,
          "type": "boolean",
        },
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Name": {
          "length": 100,
          "name": "Name",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_People",
      "synchronize": true,
      "tableName": "test_resources_migrate_People",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
        "test_resources_migrate_Job",
      ],
      "expression": "SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (test_resources_migrate_People AS People_0 LEFT JOIN test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
      "name": "test_resources_migrate_PeopleWithJob",
      "synchronize": true,
      "tableName": "test_resources_migrate_PeopleWithJob",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0;",
      "name": "test_resources_migrate_AllPeoples",
      "synchronize": true,
      "tableName": "test_resources_migrate_AllPeoples",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = FALSE;",
      "name": "test_resources_migrate_InActivePeople",
      "synchronize": true,
      "tableName": "test_resources_migrate_InActivePeople",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = TRUE;",
      "name": "test_resources_migrate_ActivePeople",
      "synchronize": true,
      "tableName": "test_resources_migrate_ActivePeople",
      "type": "view",
    },
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables 8`] = `
[
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Title": {
          "length": 255,
          "name": "Title",
          "nullable": true,
          "type": "nvarchar",
        },
        "locale": {
          "length": 14,
          "name": "locale",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_Job_texts",
      "synchronize": true,
      "tableName": "test_resources_migrate_Job_texts",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Active": {
          "default": false,
          "name": "Active",
          "nullable": true,
          "type": "boolean",
        },
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Level": {
          "name": "Level",
          "nullable": true,
          "type": "integer",
        },
        "People_ID": {
          "length": 36,
          "name": "People_ID",
          "nullable": true,
          "type": "nvarchar",
        },
        "People_Name": {
          "length": 100,
          "name": "People_Name",
          "nullable": true,
          "type": "nvarchar",
        },
        "Title": {
          "length": 255,
          "name": "Title",
          "nullable": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_Job",
      "synchronize": true,
      "tableName": "test_resources_migrate_Job",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_Job",
        "test_resources_migrate_Job_texts",
      ],
      "expression": "SELECT
  L_0.ID,
  coalesce(localized_fr_1.Title, L_0.Title) AS Title,
  L_0.Level,
  L_0.Active,
  L_0.People_ID,
  L_0.People_Name
FROM (test_resources_migrate_Job AS L_0 LEFT JOIN test_resources_migrate_Job_texts AS localized_fr_1 ON localized_fr_1.ID = L_0.ID AND localized_fr_1.locale = 'fr');",
      "name": "localized_fr_test_resources_migrate_Job",
      "synchronize": true,
      "tableName": "localized_fr_test_resources_migrate_Job",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "localized_fr_test_resources_migrate_Job",
      ],
      "expression": "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM localized_fr_test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
      "name": "localized_fr_test_resources_migrate_ActiveJobs",
      "synchronize": true,
      "tableName": "localized_fr_test_resources_migrate_ActiveJobs",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_Job",
        "test_resources_migrate_Job_texts",
      ],
      "expression": "SELECT
  L_0.ID,
  coalesce(localized_de_1.Title, L_0.Title) AS Title,
  L_0.Level,
  L_0.Active,
  L_0.People_ID,
  L_0.People_Name
FROM (test_resources_migrate_Job AS L_0 LEFT JOIN test_resources_migrate_Job_texts AS localized_de_1 ON localized_de_1.ID = L_0.ID AND localized_de_1.locale = 'de');",
      "name": "localized_de_test_resources_migrate_Job",
      "synchronize": true,
      "tableName": "localized_de_test_resources_migrate_Job",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "localized_de_test_resources_migrate_Job",
      ],
      "expression": "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM localized_de_test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
      "name": "localized_de_test_resources_migrate_ActiveJobs",
      "synchronize": true,
      "tableName": "localized_de_test_resources_migrate_ActiveJobs",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_Job",
        "test_resources_migrate_Job_texts",
      ],
      "expression": "SELECT
  L_0.ID,
  coalesce(localized_1.Title, L_0.Title) AS Title,
  L_0.Level,
  L_0.Active,
  L_0.People_ID,
  L_0.People_Name
FROM (test_resources_migrate_Job AS L_0 LEFT JOIN test_resources_migrate_Job_texts AS localized_1 ON localized_1.ID = L_0.ID AND localized_1.locale = 'en');",
      "name": "localized_test_resources_migrate_Job",
      "synchronize": true,
      "tableName": "localized_test_resources_migrate_Job",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "localized_test_resources_migrate_Job",
      ],
      "expression": "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM localized_test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
      "name": "localized_test_resources_migrate_ActiveJobs",
      "synchronize": true,
      "tableName": "localized_test_resources_migrate_ActiveJobs",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_Job",
      ],
      "expression": "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
      "name": "test_resources_migrate_ActiveJobs",
      "synchronize": true,
      "tableName": "test_resources_migrate_ActiveJobs",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Active": {
          "default": false,
          "name": "Active",
          "nullable": true,
          "type": "boolean",
        },
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Name": {
          "length": 100,
          "name": "Name",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_People",
      "synchronize": true,
      "tableName": "test_resources_migrate_People",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  L.ID,
  L.Name,
  L.Active
FROM test_resources_migrate_People AS L;",
      "name": "localized_fr_test_resources_migrate_People",
      "synchronize": true,
      "tableName": "localized_fr_test_resources_migrate_People",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "localized_fr_test_resources_migrate_People",
        "localized_fr_test_resources_migrate_Job",
      ],
      "expression": "SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (localized_fr_test_resources_migrate_People AS People_0 LEFT JOIN localized_fr_test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
      "name": "localized_fr_test_resources_migrate_PeopleWithJob",
      "synchronize": true,
      "tableName": "localized_fr_test_resources_migrate_PeopleWithJob",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  L.ID,
  L.Name,
  L.Active
FROM test_resources_migrate_People AS L;",
      "name": "localized_de_test_resources_migrate_People",
      "synchronize": true,
      "tableName": "localized_de_test_resources_migrate_People",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "localized_de_test_resources_migrate_People",
        "localized_de_test_resources_migrate_Job",
      ],
      "expression": "SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (localized_de_test_resources_migrate_People AS People_0 LEFT JOIN localized_de_test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
      "name": "localized_de_test_resources_migrate_PeopleWithJob",
      "synchronize": true,
      "tableName": "localized_de_test_resources_migrate_PeopleWithJob",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  L.ID,
  L.Name,
  L.Active
FROM test_resources_migrate_People AS L;",
      "name": "localized_test_resources_migrate_People",
      "synchronize": true,
      "tableName": "localized_test_resources_migrate_People",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "localized_test_resources_migrate_People",
        "localized_test_resources_migrate_Job",
      ],
      "expression": "SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (localized_test_resources_migrate_People AS People_0 LEFT JOIN localized_test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
      "name": "localized_test_resources_migrate_PeopleWithJob",
      "synchronize": true,
      "tableName": "localized_test_resources_migrate_PeopleWithJob",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
        "test_resources_migrate_Job",
      ],
      "expression": "SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (test_resources_migrate_People AS People_0 LEFT JOIN test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
      "name": "test_resources_migrate_PeopleWithJob",
      "synchronize": true,
      "tableName": "test_resources_migrate_PeopleWithJob",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0;",
      "name": "test_resources_migrate_AllPeoples",
      "synchronize": true,
      "tableName": "test_resources_migrate_AllPeoples",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = FALSE;",
      "name": "test_resources_migrate_InActivePeople",
      "synchronize": true,
      "tableName": "test_resources_migrate_InActivePeople",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = TRUE;",
      "name": "test_resources_migrate_ActivePeople",
      "synchronize": true,
      "tableName": "test_resources_migrate_ActivePeople",
      "type": "view",
    },
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables 9`] = `
[
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Title": {
          "length": 255,
          "name": "Title",
          "nullable": true,
          "type": "nvarchar",
        },
        "locale": {
          "length": 14,
          "name": "locale",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_Job_texts",
      "synchronize": true,
      "tableName": "test_resources_migrate_Job_texts",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Active": {
          "default": false,
          "name": "Active",
          "nullable": true,
          "type": "boolean",
        },
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Level": {
          "name": "Level",
          "nullable": true,
          "type": "integer",
        },
        "People_ID": {
          "length": 36,
          "name": "People_ID",
          "nullable": true,
          "type": "nvarchar",
        },
        "People_Name": {
          "length": 100,
          "name": "People_Name",
          "nullable": true,
          "type": "nvarchar",
        },
        "Title": {
          "length": 255,
          "name": "Title",
          "nullable": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_Job",
      "synchronize": true,
      "tableName": "test_resources_migrate_Job",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_Job",
        "test_resources_migrate_Job_texts",
      ],
      "expression": "SELECT
  L_0.ID,
  coalesce(localized_fr_1.Title, L_0.Title) AS Title,
  L_0.Level,
  L_0.Active,
  L_0.People_ID,
  L_0.People_Name
FROM (test_resources_migrate_Job AS L_0 LEFT JOIN test_resources_migrate_Job_texts AS localized_fr_1 ON localized_fr_1.ID = L_0.ID AND localized_fr_1.locale = 'fr');",
      "name": "localized_fr_test_resources_migrate_Job",
      "synchronize": true,
      "tableName": "localized_fr_test_resources_migrate_Job",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "localized_fr_test_resources_migrate_Job",
      ],
      "expression": "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM localized_fr_test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
      "name": "localized_fr_test_resources_migrate_ActiveJobs",
      "synchronize": true,
      "tableName": "localized_fr_test_resources_migrate_ActiveJobs",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_Job",
        "test_resources_migrate_Job_texts",
      ],
      "expression": "SELECT
  L_0.ID,
  coalesce(localized_de_1.Title, L_0.Title) AS Title,
  L_0.Level,
  L_0.Active,
  L_0.People_ID,
  L_0.People_Name
FROM (test_resources_migrate_Job AS L_0 LEFT JOIN test_resources_migrate_Job_texts AS localized_de_1 ON localized_de_1.ID = L_0.ID AND localized_de_1.locale = 'de');",
      "name": "localized_de_test_resources_migrate_Job",
      "synchronize": true,
      "tableName": "localized_de_test_resources_migrate_Job",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "localized_de_test_resources_migrate_Job",
      ],
      "expression": "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM localized_de_test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
      "name": "localized_de_test_resources_migrate_ActiveJobs",
      "synchronize": true,
      "tableName": "localized_de_test_resources_migrate_ActiveJobs",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_Job",
        "test_resources_migrate_Job_texts",
      ],
      "expression": "SELECT
  L_0.ID,
  coalesce(localized_1.Title, L_0.Title) AS Title,
  L_0.Level,
  L_0.Active,
  L_0.People_ID,
  L_0.People_Name
FROM (test_resources_migrate_Job AS L_0 LEFT JOIN test_resources_migrate_Job_texts AS localized_1 ON localized_1.ID = L_0.ID AND localized_1.locale = 'en');",
      "name": "localized_test_resources_migrate_Job",
      "synchronize": true,
      "tableName": "localized_test_resources_migrate_Job",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "localized_test_resources_migrate_Job",
      ],
      "expression": "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM localized_test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
      "name": "localized_test_resources_migrate_ActiveJobs",
      "synchronize": true,
      "tableName": "localized_test_resources_migrate_ActiveJobs",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_Job",
      ],
      "expression": "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
      "name": "test_resources_migrate_ActiveJobs",
      "synchronize": true,
      "tableName": "test_resources_migrate_ActiveJobs",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {
        "Active": {
          "default": false,
          "name": "Active",
          "nullable": true,
          "type": "boolean",
        },
        "ID": {
          "length": 36,
          "name": "ID",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
        "Name": {
          "length": 100,
          "name": "Name",
          "nullable": false,
          "primary": true,
          "type": "nvarchar",
        },
      },
      "name": "test_resources_migrate_People",
      "synchronize": true,
      "tableName": "test_resources_migrate_People",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  L.ID,
  L.Name,
  L.Active
FROM test_resources_migrate_People AS L;",
      "name": "localized_fr_test_resources_migrate_People",
      "synchronize": true,
      "tableName": "localized_fr_test_resources_migrate_People",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "localized_fr_test_resources_migrate_People",
        "localized_fr_test_resources_migrate_Job",
      ],
      "expression": "SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (localized_fr_test_resources_migrate_People AS People_0 LEFT JOIN localized_fr_test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
      "name": "localized_fr_test_resources_migrate_PeopleWithJob",
      "synchronize": true,
      "tableName": "localized_fr_test_resources_migrate_PeopleWithJob",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  L.ID,
  L.Name,
  L.Active
FROM test_resources_migrate_People AS L;",
      "name": "localized_de_test_resources_migrate_People",
      "synchronize": true,
      "tableName": "localized_de_test_resources_migrate_People",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "localized_de_test_resources_migrate_People",
        "localized_de_test_resources_migrate_Job",
      ],
      "expression": "SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (localized_de_test_resources_migrate_People AS People_0 LEFT JOIN localized_de_test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
      "name": "localized_de_test_resources_migrate_PeopleWithJob",
      "synchronize": true,
      "tableName": "localized_de_test_resources_migrate_PeopleWithJob",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  L.ID,
  L.Name,
  L.Active
FROM test_resources_migrate_People AS L;",
      "name": "localized_test_resources_migrate_People",
      "synchronize": true,
      "tableName": "localized_test_resources_migrate_People",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "localized_test_resources_migrate_People",
        "localized_test_resources_migrate_Job",
      ],
      "expression": "SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (localized_test_resources_migrate_People AS People_0 LEFT JOIN localized_test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
      "name": "localized_test_resources_migrate_PeopleWithJob",
      "synchronize": true,
      "tableName": "localized_test_resources_migrate_PeopleWithJob",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
        "test_resources_migrate_Job",
      ],
      "expression": "SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (test_resources_migrate_People AS People_0 LEFT JOIN test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
      "name": "test_resources_migrate_PeopleWithJob",
      "synchronize": true,
      "tableName": "test_resources_migrate_PeopleWithJob",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0;",
      "name": "test_resources_migrate_AllPeoples",
      "synchronize": true,
      "tableName": "test_resources_migrate_AllPeoples",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = FALSE;",
      "name": "test_resources_migrate_InActivePeople",
      "synchronize": true,
      "tableName": "test_resources_migrate_InActivePeople",
      "type": "view",
    },
  },
  EntitySchema {
    "@instanceof": Symbol(EntitySchema),
    "options": {
      "columns": {},
      "deps": [
        "test_resources_migrate_People",
      ],
      "expression": "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = TRUE;",
      "name": "test_resources_migrate_ActivePeople",
      "synchronize": true,
      "tableName": "test_resources_migrate_ActivePeople",
      "type": "view",
    },
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables: 0->1 1`] = `
[
  {
    "parameters": undefined,
    "query": "CREATE TABLE \`test_resources_migrate_People\` (\`ID\` varchar(36) NOT NULL, \`Name\` varchar(100) NULL, PRIMARY KEY (\`ID\`)) ENGINE=InnoDB CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'",
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables: 1->2 1`] = `
[
  {
    "parameters": undefined,
    "query": "ALTER TABLE \`test_resources_migrate_People\` ADD \`Age\` int NULL",
  },
  {
    "parameters": undefined,
    "query": "ALTER TABLE \`test_resources_migrate_People\` DROP PRIMARY KEY",
  },
  {
    "parameters": undefined,
    "query": "ALTER TABLE \`test_resources_migrate_People\` ADD PRIMARY KEY (\`ID\`, \`Name\`)",
  },
  {
    "parameters": undefined,
    "query": "ALTER TABLE \`test_resources_migrate_People\` CHANGE \`Name\` \`Name\` varchar(100) NOT NULL",
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables: 2->3 1`] = `
[
  {
    "parameters": undefined,
    "query": "ALTER TABLE \`test_resources_migrate_People\` ADD \`Active\` tinyint NULL DEFAULT 0",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`test_resources_migrate_ActivePeople\` AS SELECT
  People_0.ID,
  People_0.Name,
  People_0.Age,
  People_0.Active
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = TRUE;",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "test_resources_migrate_ActivePeople",
      "SELECT
  People_0.ID,
  People_0.Name,
  People_0.Age,
  People_0.Active
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = TRUE;",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables: 3->4 1`] = `
[
  {
    "parameters": [
      "VIEW",
      "test_resources_migrate_ActivePeople",
      "cds_admin",
    ],
    "query": "DELETE FROM \`cds_admin\`.\`typeorm_metadata\` WHERE \`type\` = ? AND \`name\` = ? AND \`schema\` = ?",
  },
  {
    "parameters": undefined,
    "query": "DROP VIEW \`test_resources_migrate_ActivePeople\`",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`test_resources_migrate_InActivePeople\` AS SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = FALSE;",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "test_resources_migrate_InActivePeople",
      "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = FALSE;",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`test_resources_migrate_ActivePeople\` AS SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = TRUE;",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "test_resources_migrate_ActivePeople",
      "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0
WHERE People_0.Active = TRUE;",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`test_resources_migrate_AllPeoples\` AS SELECT
  ActivePeople_0.Name
FROM test_resources_migrate_ActivePeople AS ActivePeople_0
UNION SELECT
  InActivePeople_1.Name
FROM test_resources_migrate_InActivePeople AS InActivePeople_1;",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "test_resources_migrate_AllPeoples",
      "SELECT
  ActivePeople_0.Name
FROM test_resources_migrate_ActivePeople AS ActivePeople_0
UNION SELECT
  InActivePeople_1.Name
FROM test_resources_migrate_InActivePeople AS InActivePeople_1;",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables: 4->5 1`] = `
[
  {
    "parameters": undefined,
    "query": "CREATE TABLE \`test_resources_migrate_Job\` (\`ID\` varchar(36) NOT NULL, \`Title\` varchar(255) NULL, \`Level\` int NULL, \`Active\` tinyint NULL DEFAULT 0, PRIMARY KEY (\`ID\`)) ENGINE=InnoDB CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`test_resources_migrate_ActiveJobs\` AS SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active
FROM test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "test_resources_migrate_ActiveJobs",
      "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active
FROM test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables: 5->6 1`] = `
[
  {
    "parameters": [
      "VIEW",
      "test_resources_migrate_AllPeoples",
      "cds_admin",
    ],
    "query": "DELETE FROM \`cds_admin\`.\`typeorm_metadata\` WHERE \`type\` = ? AND \`name\` = ? AND \`schema\` = ?",
  },
  {
    "parameters": undefined,
    "query": "DROP VIEW \`test_resources_migrate_AllPeoples\`",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`test_resources_migrate_AllPeoples\` AS SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0;",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "test_resources_migrate_AllPeoples",
      "SELECT
  People_0.Name
FROM test_resources_migrate_People AS People_0;",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables: 6->7 1`] = `
[
  {
    "parameters": [
      "VIEW",
      "test_resources_migrate_ActiveJobs",
      "cds_admin",
    ],
    "query": "DELETE FROM \`cds_admin\`.\`typeorm_metadata\` WHERE \`type\` = ? AND \`name\` = ? AND \`schema\` = ?",
  },
  {
    "parameters": undefined,
    "query": "DROP VIEW \`test_resources_migrate_ActiveJobs\`",
  },
  {
    "parameters": undefined,
    "query": "ALTER TABLE \`test_resources_migrate_Job\` ADD \`People_ID\` varchar(36) NULL",
  },
  {
    "parameters": undefined,
    "query": "ALTER TABLE \`test_resources_migrate_Job\` ADD \`People_Name\` varchar(100) NULL",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`test_resources_migrate_ActiveJobs\` AS SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "test_resources_migrate_ActiveJobs",
      "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`test_resources_migrate_PeopleWithJob\` AS SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (test_resources_migrate_People AS People_0 LEFT JOIN test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "test_resources_migrate_PeopleWithJob",
      "SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (test_resources_migrate_People AS People_0 LEFT JOIN test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables: 7->8 1`] = `
[
  {
    "parameters": undefined,
    "query": "CREATE TABLE \`test_resources_migrate_Job_texts\` (\`locale\` varchar(14) NOT NULL, \`ID\` varchar(36) NOT NULL, \`Title\` varchar(255) NULL, PRIMARY KEY (\`locale\`, \`ID\`)) ENGINE=InnoDB CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`localized_fr_test_resources_migrate_Job\` AS SELECT
  L_0.ID,
  coalesce(localized_fr_1.Title, L_0.Title) AS Title,
  L_0.Level,
  L_0.Active,
  L_0.People_ID,
  L_0.People_Name
FROM (test_resources_migrate_Job AS L_0 LEFT JOIN test_resources_migrate_Job_texts AS localized_fr_1 ON localized_fr_1.ID = L_0.ID AND localized_fr_1.locale = 'fr');",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "localized_fr_test_resources_migrate_Job",
      "SELECT
  L_0.ID,
  coalesce(localized_fr_1.Title, L_0.Title) AS Title,
  L_0.Level,
  L_0.Active,
  L_0.People_ID,
  L_0.People_Name
FROM (test_resources_migrate_Job AS L_0 LEFT JOIN test_resources_migrate_Job_texts AS localized_fr_1 ON localized_fr_1.ID = L_0.ID AND localized_fr_1.locale = 'fr');",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`localized_fr_test_resources_migrate_ActiveJobs\` AS SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM localized_fr_test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "localized_fr_test_resources_migrate_ActiveJobs",
      "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM localized_fr_test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`localized_de_test_resources_migrate_Job\` AS SELECT
  L_0.ID,
  coalesce(localized_de_1.Title, L_0.Title) AS Title,
  L_0.Level,
  L_0.Active,
  L_0.People_ID,
  L_0.People_Name
FROM (test_resources_migrate_Job AS L_0 LEFT JOIN test_resources_migrate_Job_texts AS localized_de_1 ON localized_de_1.ID = L_0.ID AND localized_de_1.locale = 'de');",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "localized_de_test_resources_migrate_Job",
      "SELECT
  L_0.ID,
  coalesce(localized_de_1.Title, L_0.Title) AS Title,
  L_0.Level,
  L_0.Active,
  L_0.People_ID,
  L_0.People_Name
FROM (test_resources_migrate_Job AS L_0 LEFT JOIN test_resources_migrate_Job_texts AS localized_de_1 ON localized_de_1.ID = L_0.ID AND localized_de_1.locale = 'de');",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`localized_de_test_resources_migrate_ActiveJobs\` AS SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM localized_de_test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "localized_de_test_resources_migrate_ActiveJobs",
      "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM localized_de_test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`localized_test_resources_migrate_Job\` AS SELECT
  L_0.ID,
  coalesce(localized_1.Title, L_0.Title) AS Title,
  L_0.Level,
  L_0.Active,
  L_0.People_ID,
  L_0.People_Name
FROM (test_resources_migrate_Job AS L_0 LEFT JOIN test_resources_migrate_Job_texts AS localized_1 ON localized_1.ID = L_0.ID AND localized_1.locale = 'en');",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "localized_test_resources_migrate_Job",
      "SELECT
  L_0.ID,
  coalesce(localized_1.Title, L_0.Title) AS Title,
  L_0.Level,
  L_0.Active,
  L_0.People_ID,
  L_0.People_Name
FROM (test_resources_migrate_Job AS L_0 LEFT JOIN test_resources_migrate_Job_texts AS localized_1 ON localized_1.ID = L_0.ID AND localized_1.locale = 'en');",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`localized_test_resources_migrate_ActiveJobs\` AS SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM localized_test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "localized_test_resources_migrate_ActiveJobs",
      "SELECT
  Job_0.ID,
  Job_0.Title,
  Job_0.Level,
  Job_0.Active,
  Job_0.People_ID,
  Job_0.People_Name
FROM localized_test_resources_migrate_Job AS Job_0
WHERE Job_0.Active = TRUE;",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`localized_fr_test_resources_migrate_People\` AS SELECT
  L.ID,
  L.Name,
  L.Active
FROM test_resources_migrate_People AS L;",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "localized_fr_test_resources_migrate_People",
      "SELECT
  L.ID,
  L.Name,
  L.Active
FROM test_resources_migrate_People AS L;",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`localized_fr_test_resources_migrate_PeopleWithJob\` AS SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (localized_fr_test_resources_migrate_People AS People_0 LEFT JOIN localized_fr_test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "localized_fr_test_resources_migrate_PeopleWithJob",
      "SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (localized_fr_test_resources_migrate_People AS People_0 LEFT JOIN localized_fr_test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`localized_de_test_resources_migrate_People\` AS SELECT
  L.ID,
  L.Name,
  L.Active
FROM test_resources_migrate_People AS L;",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "localized_de_test_resources_migrate_People",
      "SELECT
  L.ID,
  L.Name,
  L.Active
FROM test_resources_migrate_People AS L;",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`localized_de_test_resources_migrate_PeopleWithJob\` AS SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (localized_de_test_resources_migrate_People AS People_0 LEFT JOIN localized_de_test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "localized_de_test_resources_migrate_PeopleWithJob",
      "SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (localized_de_test_resources_migrate_People AS People_0 LEFT JOIN localized_de_test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`localized_test_resources_migrate_People\` AS SELECT
  L.ID,
  L.Name,
  L.Active
FROM test_resources_migrate_People AS L;",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "localized_test_resources_migrate_People",
      "SELECT
  L.ID,
  L.Name,
  L.Active
FROM test_resources_migrate_People AS L;",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
  {
    "parameters": undefined,
    "query": "CREATE VIEW \`localized_test_resources_migrate_PeopleWithJob\` AS SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (localized_test_resources_migrate_People AS People_0 LEFT JOIN localized_test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
  },
  {
    "parameters": [
      "cds_admin",
      "VIEW",
      "localized_test_resources_migrate_PeopleWithJob",
      "SELECT
  People_0.Name,
  People_0.Active,
  Job_1.Title,
  Job_1.Level,
  Job_1.Active AS JobActive
FROM (localized_test_resources_migrate_People AS People_0 LEFT JOIN localized_test_resources_migrate_Job AS Job_1 ON ((Job_1.People_ID = People_0.ID) AND (Job_1.People_Name = People_0.Name)));",
    ],
    "query": "INSERT INTO \`cds_admin\`.\`typeorm_metadata\`(\`database\`, \`schema\`, \`table\`, \`type\`, \`name\`, \`value\`) VALUES (DEFAULT, ?, DEFAULT, ?, ?, ?)",
  },
]
`;

exports[`TypeORM Test Suite should support migrate tables: 8->9 1`] = `[]`;

exports[`TypeORM Test Suite should support sha256 hash: hash length 1`] = `64`;

exports[`TypeORM Test Suite should support sha256 hash: hash value 1`] = `"28a01011d7022938a0a7ea81c32c4c76d1905e9f393efef7c90ccb24f1b227f4"`;
